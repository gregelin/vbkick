'\" t
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.TH "VBKICK" "1" "4 June 2014" "0.7" "vbkick man page"
.SH "NAME"
vbkick - automatic VirtualBox VMs and Vagrant Base Boxes builder.
.SH "SYNOPSIS"
.BI vbkick " <command> <vm_name> [args]"
.SH "DESCRIPTION"
.PP
\fBvbkick\fR is an open source and easy in use tool for building and maintaining VirtualBox VMs described as a code in a single definition file (\fIvbmachine.cfg\fP). \fBvbkick\fR is lightweigh and is written in bash with enabled POSIX mode.
.PP
There are only 1-2 actions needed to create and configure the new VM from scratch. The VM postinstall process could be supported by any of available configuration management software like puppet or cfengine. Repeatable virtual machine environments are perfect as a personal lab where you play and test various technologies.
.PP
Task is mostly about running VBoxManage command in proper order with proper options. To complete the job \fBvbkick\fR uses ssh and scp commands.
.PP
During the build kickstart and postinstall files are serve to VM via a local webserver started in the background. You can disable this by set up \fIwebserver_disabled=1\fR option in a definition file.
.PP
\fBvbkick\fR is supported by \fIvbtyper.pl\fP tool, which helps enter key-strokes into a VM programmatically from the host.
.PP
.SH "COMMANDS"
.TP 4
.I <definition_file>
Contains all crucial parameters like number of CPUs, memory size, OS type to build and tuning the new VM.
If no definition file specify, \fBvbkick\fR search for \fIvbmachine.cfg\fP in the current path. If none of expected definition files exists then program terminates with return code 1 and proper message.
.TP
.B build \fIvm_name\fR [definition_file]
.br
Creates and kickstart the new VM from the given definition file.
.TP
.B postinstall \fIvm_name\fR [definition_file]
.br
Run specify in definition file postinstall scripts via SSH on the VM.
.TP
.B play \fIvm_name\fR [definition_file]
.br
Run specify in definition file play scripts/commands via SSH on the VM.
.TP
.B validate \fIvm_name\fR [definition_file]
.br
Run specify in definition file validate scripts via SSH on the VM. Checks whether the new VM has expected behaviour.
.TP
.B update \fIvm_name\fR [definition_file]
.br
Updates attached VBoxGuestAdditions iso and run specify in definition file update scripts via SSH on the VM.
.TP
.B export \fIvm_name\fR [definition_file]
.br
Exports the VM as a Vagrant Base Box - \fIvm_name.box\fP gzipped file is created.
.TP
.B destroy \fIvm_name\fR
.br
Power off and deletes the VM from the VirtualBox and the filesystem.
.TP
.B ssh \fIvm_name\fR [definition_file]
.br
Connect to the VM via SSH.
.TP
.B on \fIvm_name\fR [definition_file]
.br
Turn on the VM.
.TP
.B shutdown \fIvm_name\fR [definition_file]
.br
Turn off the VM using shutdown command via SSH. If this fail then the acpipower button is used.
.TP
.B clone \fIvm_name\fR [clone_name]
.br
Clones the VM. If no clone name specify default one will be used - {VM_NAME}-clone{NR}, where {NR} is the next available number.
.TP
.B snap \fIvm_name\fR [snap_name]
.br
Takes the VM snapshot. If no snapshot name specify default one will be used - {VM_NAME}-snap{NR}, where {NR} is the next available number.
.TP
.B resnap \fIvm_name\fR [snap_name]
.br
Restore the VM snapshot. If no snapshot name specify, restore to the current snapshot.
.TP
.B delsnap \fIvm_name\fR [snap_name]
.br
Deletes the VM snapshot. If no snapshot name specify, deletes the current snapshot.
.TP
.B lssnap \fIvm_name\fR
.br
List all snapshots for a given VM.
.TP
.B list
.br
List all VirtualBox machines with the state. Format: "vm name:state"
.TP
.B version
.br
Print the \fBvbkick\fR version and exit.
.TP
.B help
.br
Print the help and exit.
.PP
.SH "EXAMPLES"
.TP 4
.B vbkick build \fImyVM vbmachine-7.5-x86_64-noX.cfg\fR
.br
Builds \fImyVM\fR virtual machine defined in \fIvbmachine-7.5-x86_64-noX.cfg\fR file.
.TP
.B vbkick postinstall \fImyVM vbmachine-7.5-x86_64-noX.cfg\fR
.br
SCP to \fImyVM\fR and exec via SSH all postinstall scripts defined in \fIvbmachine-7.5-x86_64-noX.cfg\fR file.
.TP
.B vbkick ssh \fImyVM\fR
.br
Works as only \fIvbmachine.cfg\fR exists in the path where the command is run. A good manner is to create a \fIvbmachine.cfg\fR as a symlink to the default definition file: \fIln -s vbmachine-definition-source-file.cfg vbmachine.cfg\fR
.TP
.B vbkick snap \fImyVM mySnap01\fR
.br
Creates the new \fImySnap01\fR snapshot of the \fImyVM\fR. Use \fI`vbkick lssnap myVM`\fR to list it and \fI`vbkick delsnap myVM mySnap01`\fR to remove it.
.PP
.SH SEE ALSO
.BR "vboxmanage"(1), " bash" (1), " ssh" (1), " scp" (1)
.SH BUGS
If you feel you have found a bug in \fBvbkick\fR, please create an issue report at https://github.com/wilas/vbkick/issues
.SH AUTHOR
Kamil Wilas (wilas.pl)
.SH COPYRIGHT
\fBvbkick\fR is distributed under the MPL 2.0 License. See LICENSE file in https://github.com/wilas/vbkick for details.
.PP
The site includes also usage examples and other docs which are not covered by this manual page.
